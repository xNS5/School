Script started on Fri 04 May 2018 02:32:19 PM PDT
kennedm6@cf162-20:~/201820_csci241_kennedm6/241repo/lab4$ ls
lab4.pdf  MergeSort.class  MergeSort.java  typescript  typescript.timing
kennedm6@cf162-20:~/201820_csci241_kennedm6/241repo/lab4$ clear
[3;J[H[2Jkennedm6@cf162-20:~/201820_csci241_kennedm6/241repo/lab4$ javac -g mergeSort[K[K[K[K[K[K[K[K[KMergeSort.java[K[K[K[K[K.java
kennedm6@cf162-20:~/201820_csci241_kennedm6/241repo/lab4$ java Mer[K[K[K[K[K[K[K[Kha[K[Kjava mergeSort[K[K[K[K[K[K[K[K[KMerges[KSort
Original array:
12 11 13 5 6 7 
Exception in thread "main" java.lang.ArrayIndexOutOfBoundsException: -1
	at MergeSort.merge(MergeSort.java:70)
	at MergeSort.sort(MergeSort.java:89)
	at MergeSort.sort(MergeSort.java:86)
	at MergeSort.sort(MergeSort.java:86)
	at MergeSort.main(MergeSort.java:117)
kennedm6@cf162-20:~/201820_csci241_kennedm6/241repo/lab4$ java MergeSortc -g MergeSort.javaclear[Kjavac -g MergeSort.java[9P MergeSort[Kjdb Merbe[K[KgeSort
Initializing jdb ...
> help
** command list **
connectors                -- list available connectors and transports in this VM

run [class [args]]        -- start execution of application's main class

threads [threadgroup]     -- list threads
thread <thread id>        -- set default thread
suspend [thread id(s)]    -- suspend threads (default: all)
resume [thread id(s)]     -- resume threads (default: all)
where [<thread id> | all] -- dump a thread's stack
wherei [<thread id> | all]-- dump a thread's stack, with pc info
up [n frames]             -- move up a thread's stack
down [n frames]           -- move down a thread's stack
kill <thread id> <expr>   -- kill a thread with the given exception object
interrupt <thread id>     -- interrupt a thread

print <expr>              -- print value of expression
dump <expr>               -- print all object information
eval <expr>               -- evaluate expression (same as print)
set <lvalue> = <expr>     -- assign new value to field/variable/array element
locals                    -- print all local variables in current stack frame

classes                   -- list currently known classes
class <class id>          -- show details of named class
methods <class id>        -- list a class's methods
fields <class id>         -- list a class's fields

threadgroups              -- list threadgroups
threadgroup <name>        -- set current threadgroup

stop in <class id>.<method>[(argument_type,...)]
                          -- set a breakpoint in a method
stop at <class id>:<line> -- set a breakpoint at a line
clear <class id>.<method>[(argument_type,...)]
                          -- clear a breakpoint in a method
clear <class id>:<line>   -- clear a breakpoint at a line
clear                     -- list breakpoints
catch [uncaught|caught|all] <class id>|<class pattern>
                          -- break when specified exception occurs
ignore [uncaught|caught|all] <class id>|<class pattern>
                          -- cancel 'catch' for the specified exception
watch [access|all] <class id>.<field name>
                          -- watch access/modifications to a field
unwatch [access|all] <class id>.<field name>
                          -- discontinue watching access/modifications to a field
trace [go] methods [thread]
                          -- trace method entries and exits.
                          -- All threads are suspended unless 'go' is specified
trace [go] method exit | exits [thread]
                          -- trace the current method's exit, or all methods' exits
                          -- All threads are suspended unless 'go' is specified
untrace [methods]         -- stop tracing method entrys and/or exits
step                      -- execute current line
step up                   -- execute until the current method returns to its caller
stepi                     -- execute current instruction
next                      -- step one line (step OVER calls)
cont                      -- continue execution from breakpoint

list [line number|method] -- print source code
use (or sourcepath) [source file path]
                          -- display or change the source path
exclude [<class pattern>, ... | "none"]
                          -- do not report step or method events for specified classes
classpath                 -- print classpath info from target VM

monitor <command>         -- execute command each time the program stops
monitor                   -- list monitors
unmonitor <monitor#>      -- delete a monitor
read <filename>           -- read and execute a command file

lock <expr>               -- print lock info for an object
threadlocks [thread id]   -- print lock info for a thread

pop                       -- pop the stack through and including the current frame
reenter                   -- same as pop, but current frame is reentered
redefine <class id> <class file name>
                          -- redefine the code for a class

disablegc <expr>          -- prevent garbage collection of an object
enablegc <expr>           -- permit garbage collection of an object

!!                        -- repeat last command
<n> <command>             -- repeat command n times
# <command>               -- discard (no-op)
help (or ?)               -- list commands
version                   -- print version information
exit (or quit)            -- exit debugger

<class id>: a full class name with package qualifiers
<class pattern>: a class name with a leading or trailing wildcard ('*')
<thread id>: thread number as reported in the 'threads' command
<expr>: a Java(TM) Programming Language expression.
Most common syntax is supported.

Startup commands can be placed in either "jdb.ini" or ".jdbrc"
in user.home or user.dir
> stop at MergeSort:27
Deferring breakpoint MergeSort:27.
It will be set after the class is loaded.
> run
run MergeSort
Set uncaught java.lang.Throwable
Set deferred uncaught java.lang.Throwable
> 
VM Started: Set deferred breakpoint MergeSort:27
Original array:
12 11 13 5 6 7 

Breakpoint hit: "thread=main", MergeSort.merge(), line=27 bci=0
27            int n1 = m - l;

main[1] dump n1
com.sun.tools.example.debug.expr.ParseException: Name unknown: n1
 n1 = null
main[1] step
> 
Step completed: "thread=main", MergeSort.merge(), line=28 bci=5
28            int n2 = r - m;

main[1] dum p  p m n2
com.sun.tools.example.debug.expr.ParseException: Name unknown: n2
 n2 = null
main[1] dump 2 n1
 n1 = 0
main[1] step
> 
Step completed: "thread=main", MergeSort.merge(), line=31 bci=10
31            int L[] = new int[n1];

main[1] sump L[]
Unrecognized command: 'sump'.  Try help...
main[1] dump p[  [ L[]
com.sun.tools.example.debug.expr.ParseException: Name unknown: L
 L[] = null
main[1] step
> 
Step completed: "thread=main", MergeSort.merge(), line=32 bci=16
32            int R[] = new int[n2];

main[1] dump L[]
com.sun.tools.example.debug.expr.ParseException: Encountered "]" at line 1, column 4.
Was expecting one of:
    "false" ...
    "new" ...
    "null" ...
    "super" ...
    "this" ...
    "true" ...
    <INTEGER_LITERAL> ...
    <FLOATING_POINT_LITERAL> ...
    <CHARACTER_LITERAL> ...
    <STRING_LITERAL> ...
    <IDENTIFIER> ...
    "(" ...
    "!" ...
    "~" ...
    "++" ...
    "--" ...
    "+" ...
    "-" ...
    
 L[] = null
main[1] step
> 
Step completed: "thread=main", MergeSort.merge(), line=35 bci=22
35            for (int i=0; i<n1; i++) {

main[1] step
> 
Step completed: "thread=main", MergeSort.merge(), line=38 bci=49
38            for (int j=0; j<n2; j++) {

main[1] step
> 
Step completed: "thread=main", MergeSort.merge(), line=39 bci=59
39                R[j] = arr[m+1+j];

main[1] dump m
 m = 0
main[1] dump j
 j = 0
main[1] step
> 
Step completed: "thread=main", MergeSort.merge(), line=38 bci=72
38            for (int j=0; j<n2; j++) {

main[1] step
> 
Step completed: "thread=main", MergeSort.merge(), line=45 bci=78
45            int i = 0, j = 0;

main[1] step
> 
Step completed: "thread=main", MergeSort.merge(), line=48 bci=84
48            int k = l-1;

main[1] dump k
com.sun.tools.example.debug.expr.ParseException: Name unknown: k
 k = null
main[1] step
> 
Step completed: "thread=main", MergeSort.merge(), line=49 bci=89
49            while (i < n1 && j < n2) {

main[1] dump k
 k = -1
main[1] ^Ckennedm6@cf162-20:~/201820_csci241_kennedm6/241repo/lab4$ clear
[3;J[H[2Jkennedm6@cf162-20:~/201820_csci241_kennedm6/241repo/lab4$ locals
No command 'locals' found, did you mean:
 Command 'localc' from package 'libreoffice-calc' (main)
 Command 'locale' from package 'libc-bin' (main)
locals: command not found
kennedm6@cf162-20:~/201820_csci241_kennedm6/241repo/lab4$ java[K[K[K[Kjdb MergeSort
Initializing jdb ...
> loca    stop in MergeSort.s merge
Deferring breakpoint MergeSort.merge.
It will be set after the class is loaded.
> run
run MergeSort
Set uncaught java.lang.Throwable
Set deferred uncaught java.lang.Throwable
> 
VM Started: Set deferred breakpoint MergeSort.merge
Original array:
12 11 13 5 6 7 

Breakpoint hit: "thread=main", MergeSort.merge(), line=27 bci=0
27            int n1 = m - l;

main[1] locals
Method arguments:
arr = instance of int[6] (id=422)
l = 0
m = 0
r = 1
Local variables:
main[1] step
> 
Step completed: "thread=main", MergeSort.merge(), line=28 bci=5
28            int n2 = r - m;

main[1] local
Unrecognized command: 'local'.  Try help...
main[1] locals
Method arguments:
arr = instance of int[6] (id=422)
l = 0
m = 0
r = 1
Local variables:
n1 = 0
main[1] step
> 
Step completed: "thread=main", MergeSort.merge(), line=31 bci=10
31            int L[] = new int[n1];

main[1] step
> 
Step completed: "thread=main", MergeSort.merge(), line=32 bci=16
32            int R[] = new int[n2];

main[1] step
> 
Step completed: "thread=main", MergeSort.merge(), line=35 bci=22
35            for (int i=0; i<n1; i++) {

main[1] locals
Method arguments:
arr = instance of int[6] (id=422)
l = 0
m = 0
r = 1
Local variables:
n1 = 0
n2 = 1
L = instance of int[0] (id=423)
R = instance of int[1] (id=424)
main[1] liste 
31            int L[] = new int[n1];
32            int R[] = new int[n2];
33    
34            /*Copy data to temp arrays*/
35 =>         for (int i=0; i<n1; i++) {
36                L[i] = arr[l+i];
37            }
38            for (int j=0; j<n2; j++) {
39                R[j] = arr[m+1+j];
40            }
main[1] watch [all] MergeSort.k
Class containing field must be specified.
main[1] where
  [1] MergeSort.merge (MergeSort.java:35)
  [2] MergeSort.sort (MergeSort.java:89)
  [3] MergeSort.sort (MergeSort.java:86)
  [4] MergeSort.sort (MergeSort.java:86)
  [5] MergeSort.main (MergeSort.java:117)
main[1] locals
Method arguments:
arr = instance of int[6] (id=422)
l = 0
m = 0
r = 1
Local variables:
n1 = 0
n2 = 1
L = instance of int[0] (id=423)
R = instance of int[1] (id=424)
main[1] ^Ckennedm6@cf162-20:~/201820_csci241_kennedm6/241repo/lab4$ clear
[3;J[H[2Jkennedm6@cf162-20:~/201820_csci241_kennedm6/241repo/lab4$ javac -g MergeSort.java
kennedm6@cf162-20:~/201820_csci241_kennedm6/241repo/lab4$ java mer[K[K[K[K[K[K[Kdb MergeSort
Initializing jdb ...
> stop in Merge eSort.merge
Deferring breakpoint MergeSort.merge.
It will be set after the class is loaded.
> run
run MergeSort
Set uncaught java.lang.Throwable
Set deferred uncaught java.lang.Throwable
> 
VM Started: Set deferred breakpoint MergeSort.merge
Original array:
12 11 13 5 6 7 

Breakpoint hit: "thread=main", MergeSort.merge(), line=27 bci=0
27            int n1 = m - l;

main[1] step
> 
Step completed: "thread=main", MergeSort.merge(), line=28 bci=5
28            int n2 = r - m;

main[1] step
> 
Step completed: "thread=main", MergeSort.merge(), line=31 bci=10
31            int L[] = new int[n1];

main[1] step
> 
Step completed: "thread=main", MergeSort.merge(), line=32 bci=16
32            int R[] = new int[n2];

main[1] step
> 
Step completed: "thread=main", MergeSort.merge(), line=35 bci=22
35            for (int i=0; i<n1; i++) {

main[1] step
> 
Step completed: "thread=main", MergeSort.merge(), line=38 bci=49
38            for (int j=0; j<n2; j++) {

main[1] step
> 
Step completed: "thread=main", MergeSort.merge(), line=39 bci=59
39                R[j] = arr[m+1+j];

main[1] locals
Method arguments:
arr = instance of int[6] (id=422)
l = 0
m = 0
r = 1
Local variables:
n1 = 0
n2 = 1
L = instance of int[0] (id=423)
R = instance of int[1] (id=424)
j = 0
main[1] con   step
> 
Step completed: "thread=main", MergeSort.merge(), line=38 bci=72
38            for (int j=0; j<n2; j++) {

main[1] step
> 
Step completed: "thread=main", MergeSort.merge(), line=45 bci=78
45            int i = 0, j = 0;

main[1] se  step
> 
Step completed: "thread=main", MergeSort.merge(), line=48 bci=84
48            int k = l-1;

main[1] dump k
com.sun.tools.example.debug.expr.ParseException: Name unknown: k
 k = null
main[1] d step\ 
> 
Step completed: "thread=main", MergeSort.merge(), line=49 bci=89
49            while (i < n1 && j < n2) {

main[1] dump k
 k = -1
main[1] ^Ckennedm6@cf162-20:~/201820_csci241_kennedm6/241repo/lab4$ clear
[3;J[H[2Jkennedm6@cf162-20:~/201820_csci241_kennedm6/241repo/lab4$ javac -b[K[Kg [K[K-0g[K[Kg L[KMergeSort.java
kennedm6@cf162-20:~/201820_csci241_kennedm6/241repo/lab4$ javac M[K[K[K MergeSort
Original array:
12 11 13 5 6 7 

Sorted array:
6 7 7 11 13 7 
kennedm6@cf162-20:~/201820_csci241_kennedm6/241repo/lab4$ clear
[3;J[H[2Jkennedm6@cf162-20:~/201820_csci241_kennedm6/241repo/lab4$ ja[Kdb MergeSort
Initializing jdb ...
> ru  steo  op in k   Mert geSort. .M merge
Deferring breakpoint MergeSort.merge.
It will be set after the class is loaded.
> run
run MergeSort
Set uncaught java.lang.Throwable
Set deferred uncaught java.lang.Throwable
> 
VM Started: Set deferred breakpoint MergeSort.merge
Original array:
12 11 13 5 6 7 

Breakpoint hit: "thread=main", MergeSort.merge(), line=27 bci=0
27            int n1 = m - l;

main[1] step
> 
Step completed: "thread=main", MergeSort.merge(), line=28 bci=5
28            int n2 = r - m;

main[1] dump n1
 n1 = 0
main[1] step
> 
Step completed: "thread=main", MergeSort.merge(), line=31 bci=10
31            int L[] = new int[n1];

main[1] dump n2
 n2 = 1
main[1] ^Ckennedm6@cf162-20:~/201820_csci241_kennedm6/241repo/lab4$ clear
[3;J[H[2Jkennedm6@cf162-20:~/201820_csci241_kennedm6/241repo/lab4$ jdb -g[K[K[K[K[Kavac g[K-g MergeSort.java
kennedm6@cf162-20:~/201820_csci241_kennedm6/241repo/lab4$ java MergeSort
Original array:
12 11 13 5 6 7 

Sorted array:
5 6 7 11 12 13 
kennedm6@cf162-20:~/201820_csci241_kennedm6/241repo/lab4$ jaa[Kva MergeSort 1235156
Original array:
1235156 

Sorted array:
1235156 
kennedm6@cf162-20:~/201820_csci241_kennedm6/241repo/lab4$ java MergeSort 12 [K[K 4 2 5 12 5 23
Original array:
1 4 2 5 12 5 23 

Sorted array:
1 2 4 5 5 12 23 
kennedm6@cf162-20:~/201820_csci241_kennedm6/241repo/lab4$ clear
[3;J[H[2Jkennedm6@cf162-20:~/201820_csci241_kennedm6/241repo/lab4$ clearjava MergeSort 1 4 2 5 12 5 23[8P235156[Kc -g MergeSort.java
kennedm6@cf162-20:~/201820_csci241_kennedm6/241repo/lab4$ java MergeSort 12415
Exception in thread "main" java.lang.NumberFormatException: For input string: "12415 "
	at java.lang.NumberFormatException.forInputString(NumberFormatException.java:65)
	at java.lang.Integer.parseInt(Integer.java:580)
	at java.lang.Integer.parseInt(Integer.java:615)
	at MergeSort.main(MergeSort.java:110)
kennedm6@cf162-20:~/201820_csci241_kennedm6/241repo/lab4$ clear
[3;J[H[2Jkennedm6@cf162-20:~/201820_csci241_kennedm6/241repo/lab4$ javac -g MergeSort.java
kennedm6@cf162-20:~/201820_csci241_kennedm6/241repo/lab4$ jdb MergeSort
Initializing jdb ...
> run
run MergeSort
Set uncaught java.lang.Throwable
Set deferred uncaught java.lang.Throwable
> 
VM Started: Original array:
12 11 13 5 6 7 

Sorted array:
5 6 7 11 12 13 

The application exited
kennedm6@cf162-20:~/201820_csci241_kennedm6/241repo/lab4$ jdb MergeSort
Initializing jdb ...
> stop at merge     MergeSort.Me  merg     :72
Deferring breakpoint MergeSort:72.
It will be set after the class is loaded.
> run
run MergeSort
Set uncaught java.lang.Throwable
Set deferred uncaught java.lang.Throwable
> 
VM Started: Set deferred breakpoint MergeSort:72
Original array:
12 11 13 5 6 7 

Breakpoint hit: "thread=main", MergeSort.merge(), line=72 bci=193
72                k++;

main[1] d print k
 k = 2
main[1] clear Mere geSr ort.j  { :72
Removed: breakpoint MergeSort:72
main[1] stop at merge     MergeSort.32
"32" is not a valid method name.
main[1] ^[[A    stpoi   op at MergeSort:32
Set breakpoint MergeSort:32
main[1] cont
> 
Breakpoint hit: "thread=main", MergeSort.merge(), line=32 bci=18
32            int R[] = new int[n2];

main[1] locals
Method arguments:
arr = instance of int[6] (id=422)
l = 3
m = 3
r = 4
Local variables:
n1 = 1
n2 = 1
L = instance of int[1] (id=423)
main[1] cont 
> 
Breakpoint hit: "thread=main", MergeSort.merge(), line=32 bci=18
32            int R[] = new int[n2];

main[1] clear MergeSort. :32
Removed: breakpoint MergeSort:32
main[1] help
** command list **
connectors                -- list available connectors and transports in this VM

run [class [args]]        -- start execution of application's main class

threads [threadgroup]     -- list threads
thread <thread id>        -- set default thread
suspend [thread id(s)]    -- suspend threads (default: all)
resume [thread id(s)]     -- resume threads (default: all)
where [<thread id> | all] -- dump a thread's stack
wherei [<thread id> | all]-- dump a thread's stack, with pc info
up [n frames]             -- move up a thread's stack
down [n frames]           -- move down a thread's stack
kill <thread id> <expr>   -- kill a thread with the given exception object
interrupt <thread id>     -- interrupt a thread

print <expr>              -- print value of expression
dump <expr>               -- print all object information
eval <expr>               -- evaluate expression (same as print)
set <lvalue> = <expr>     -- assign new value to field/variable/array element
locals                    -- print all local variables in current stack frame

classes                   -- list currently known classes
class <class id>          -- show details of named class
methods <class id>        -- list a class's methods
fields <class id>         -- list a class's fields

threadgroups              -- list threadgroups
threadgroup <name>        -- set current threadgroup

stop in <class id>.<method>[(argument_type,...)]
                          -- set a breakpoint in a method
stop at <class id>:<line> -- set a breakpoint at a line
clear <class id>.<method>[(argument_type,...)]
                          -- clear a breakpoint in a method
clear <class id>:<line>   -- clear a breakpoint at a line
clear                     -- list breakpoints
catch [uncaught|caught|all] <class id>|<class pattern>
                          -- break when specified exception occurs
ignore [uncaught|caught|all] <class id>|<class pattern>
                          -- cancel 'catch' for the specified exception
watch [access|all] <class id>.<field name>
                          -- watch access/modifications to a field
unwatch [access|all] <class id>.<field name>
                          -- discontinue watching access/modifications to a field
trace [go] methods [thread]
                          -- trace method entries and exits.
                          -- All threads are suspended unless 'go' is specified
trace [go] method exit | exits [thread]
                          -- trace the current method's exit, or all methods' exits
                          -- All threads are suspended unless 'go' is specified
untrace [methods]         -- stop tracing method entrys and/or exits
step                      -- execute current line
step up                   -- execute until the current method returns to its caller
stepi                     -- execute current instruction
next                      -- step one line (step OVER calls)
cont                      -- continue execution from breakpoint

list [line number|method] -- print source code
use (or sourcepath) [source file path]
                          -- display or change the source path
exclude [<class pattern>, ... | "none"]
                          -- do not report step or method events for specified classes
classpath                 -- print classpath info from target VM

monitor <command>         -- execute command each time the program stops
monitor                   -- list monitors
unmonitor <monitor#>      -- delete a monitor
read <filename>           -- read and execute a command file

lock <expr>               -- print lock info for an object
threadlocks [thread id]   -- print lock info for a thread

pop                       -- pop the stack through and including the current frame
reenter                   -- same as pop, but current frame is reentered
redefine <class id> <class file name>
                          -- redefine the code for a class

disablegc <expr>          -- prevent garbage collection of an object
enablegc <expr>           -- permit garbage collection of an object

!!                        -- repeat last command
<n> <command>             -- repeat command n times
# <command>               -- discard (no-op)
help (or ?)               -- list commands
version                   -- print version information
exit (or quit)            -- exit debugger

<class id>: a full class name with package qualifiers
<class pattern>: a class name with a leading or trailing wildcard ('*')
<thread id>: thread number as reported in the 'threads' command
<expr>: a Java(TM) Programming Language expression.
Most common syntax is supported.

Startup commands can be placed in either "jdb.ini" or ".jdbrc"
in user.home or user.dir
main[1] montor locals
Unrecognized command: 'montor'.  Try help...
main[1] monitor
main[1] mono itor > <locals>
main[1] l stop at MergeSort:32
Set breakpoint MergeSort:32
main[1] cont
> 
Breakpoint hit: "thread=main", MergeSort.merge(), line=32 bci=18
32            int R[] = new int[n2];

Unrecognized command: '<locals>'.  Try help...
main[1] main[1] un  m monitors
Unrecognized command: 'monitors'.  Try help...
main[1] monitor
1:  <locals>
main[1] unmonitor monitor1`         1
Unmonitoring 1:  <locals> 
main[1] ^Ckennedm6@cf162-20:~/201820_csci241_kennedm6/241repo/lab4$ exit

Script done on Fri 04 May 2018 02:59:06 PM PDT
